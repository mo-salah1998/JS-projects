"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Page = void 0;
const cropperExtra_1 = require("./extras/cropperExtra");
const extras_1 = require("./extras/extras");
const orientation_1 = require("./orientation");
/**
 * Page prediction wrapper class. Holds the results of a parsed document's page.
 * Holds a `Prediction` that's either a document-level Prediction, or inherits from one.
 * @typeParam T an extension of an `Prediction`. Mandatory in order to properly create a page-level prediction.
 */
class Page {
    /**
     *
     * @param inferenceClass constructor signature for an inference.
     * @param httpResponse raw http response.
     * @param pageId the page's index (identifier).
     * @param orientation the page's orientation.
     */
    constructor(predictionType, rawPrediction, pageId, orientation) {
        if (pageId !== undefined && orientation !== undefined) {
            this.orientation = new orientation_1.OrientationField({
                prediction: orientation,
                pageId: pageId,
            });
        }
        else {
            orientation = undefined;
        }
        this.id = pageId;
        this.prediction = new predictionType(rawPrediction["prediction"], pageId);
        if (rawPrediction["extras"] &&
            Object.keys(rawPrediction["extras"].length > 0)) {
            const extras = {};
            Object.entries(rawPrediction["extras"]).forEach(([extraKey, extraValue]) => {
                switch (extraKey) {
                    case "cropper":
                        extras["cropper"] = new cropperExtra_1.CropperExtra(extraValue);
                }
            });
            this.extras = new extras_1.Extras(extras);
        }
    }
    /**
     * Default string representation.
     */
    toString() {
        const title = `Page ${this.id}`;
        return `${title}
${"-".repeat(title.length)}
${this.prediction.toString()}
`;
    }
}
exports.Page = Page;
