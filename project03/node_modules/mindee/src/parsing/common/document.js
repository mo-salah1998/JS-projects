"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Document = void 0;
const cropperExtra_1 = require("./extras/cropperExtra");
const extras_1 = require("./extras/extras");
/**
 * Document prediction wrapper class. Holds the results of a parsed document.
 * @typeParam T an extension of an `Inference`. Mandatory in order to properly create an inference.
 */
class Document {
    /**
     *
     * @param inferenceClass constructor signature for an inference.
     * @param httpResponse raw http response.
     */
    constructor(inferenceClass, httpResponse) {
        this.id = httpResponse?.id ?? "";
        this.filename = httpResponse?.name ?? "";
        this.ocr = httpResponse?.ocr ?? undefined;
        this.inference = new inferenceClass(httpResponse["inference"]);
        // Note: this is a convoluted but functional way of being able to implement/use Extras fields
        // as an extension of a Map object (like having an adapted toString() method, for instance).
        if (httpResponse["extras"] &&
            Object.keys(httpResponse["extras"].length > 0)) {
            const extras = {};
            Object.entries(httpResponse["extras"]).forEach(([extraKey, extraValue]) => {
                switch (extraKey) {
                    case "cropper":
                        extras["cropper"] = new cropperExtra_1.CropperExtra(extraValue);
                }
            });
            this.extras = new extras_1.Extras(extras);
        }
    }
    /**
     * Default string representation.
     */
    toString() {
        return `########\nDocument\n########
:Mindee ID: ${this.id}
:Filename: ${this.filename}

${this.inference?.toString()}`;
    }
}
exports.Document = Document;
