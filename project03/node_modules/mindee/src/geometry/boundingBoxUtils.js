"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBBoxForPolygons = exports.getBbox = exports.mergeBbox = exports.getBoundingBoxFromBBox = exports.getBoundingBox = void 0;
/**
 * Given a Polygon, calculate a polygon that encompasses all points.
 */
function getBoundingBox(polygon) {
    const bbox = getBbox(polygon);
    return [
        [bbox[0], bbox[1]],
        [bbox[2], bbox[1]],
        [bbox[2], bbox[3]],
        [bbox[0], bbox[3]],
    ];
}
exports.getBoundingBox = getBoundingBox;
/**
 * Given a BBox, generate the associated bounding box.
 */
function getBoundingBoxFromBBox(bbox) {
    return [
        [bbox[0], bbox[1]],
        [bbox[2], bbox[1]],
        [bbox[2], bbox[3]],
        [bbox[0], bbox[3]],
    ];
}
exports.getBoundingBoxFromBBox = getBoundingBoxFromBBox;
/**
 * Given 2 bbox, merge them.
 */
function mergeBbox(bbox1, bbox2) {
    return [
        Math.min(bbox1[0], bbox2[0]),
        Math.min(bbox1[1], bbox2[1]),
        Math.max(bbox1[2], bbox2[2]),
        Math.max(bbox1[3], bbox2[3]),
    ];
}
exports.mergeBbox = mergeBbox;
/**
 * Given a Polygon, calculate a bounding box that encompasses all points.
 */
function getBbox(polygon) {
    const allY = polygon.map((point) => point[1]);
    const allX = polygon.map((point) => point[0]);
    const yMin = Math.min(...allY);
    const yMax = Math.max(...allY);
    const xMin = Math.min(...allX);
    const xMax = Math.max(...allX);
    return [xMin, yMin, xMax, yMax];
}
exports.getBbox = getBbox;
/**
 * Given polygons, calculate a bounding box that encompasses all points.
 */
function getBBoxForPolygons(polygons) {
    const allY = polygons.flatMap((polygon) => polygon.map((point) => point[1]));
    const allX = polygons.flatMap((polygon) => polygon.map((point) => point[0]));
    const yMin = Math.min(...allY);
    const yMax = Math.max(...allY);
    const xMin = Math.min(...allX);
    const xMax = Math.max(...allX);
    return [xMin, yMin, xMax, yMax];
}
exports.getBBoxForPolygons = getBBoxForPolygons;
