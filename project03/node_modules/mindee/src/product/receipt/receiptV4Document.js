"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReceiptV4Document = void 0;
const common_1 = require("../../parsing/common");
const standard_1 = require("../../parsing/standard");
/**
 * Document data for Receipt, API version 5.
 */
class ReceiptV4Document {
    constructor(rawPrediction, pageId) {
        this.locale = new standard_1.LocaleField({
            prediction: rawPrediction["locale"],
        });
        this.totalTax = new standard_1.AmountField({
            prediction: rawPrediction["total_tax"],
            pageId: pageId,
        });
        this.totalAmount = new standard_1.AmountField({
            prediction: rawPrediction["total_amount"],
            pageId: pageId,
        });
        this.totalNet = new standard_1.AmountField({
            prediction: rawPrediction["total_net"],
            pageId: pageId,
        });
        this.tip = new standard_1.AmountField({
            prediction: rawPrediction["tip"],
            pageId: pageId,
        });
        this.date = new standard_1.DateField({
            prediction: rawPrediction["date"],
            pageId: pageId,
        });
        this.category = new standard_1.ClassificationField({
            prediction: rawPrediction["category"],
        });
        this.subCategory = new standard_1.ClassificationField({
            prediction: rawPrediction["subcategory"],
        });
        this.documentType = new standard_1.StringField({
            prediction: rawPrediction["document_type"],
            pageId: pageId,
        });
        this.supplier = new standard_1.StringField({
            prediction: rawPrediction["supplier"],
            pageId: pageId,
        });
        this.time = new standard_1.StringField({
            prediction: rawPrediction["time"],
            pageId: pageId,
        });
        this.taxes = new standard_1.Taxes().init(rawPrediction["taxes"], pageId);
    }
    /**
     * Default string representation.
     */
    toString() {
        const outStr = `:Locale: ${this.locale}
:Date: ${this.date}
:Category: ${this.category}
:Subcategory: ${this.subCategory}
:Document type: ${this.documentType}
:Time: ${this.time}
:Supplier name: ${this.supplier}
:Taxes: ${this.taxes}
:Total net: ${this.totalNet}
:Total tax: ${this.totalTax}
:Tip: ${this.tip}
:Total amount: ${this.totalAmount}`;
        return (0, common_1.cleanOutString)(outStr);
    }
}
exports.ReceiptV4Document = ReceiptV4Document;
