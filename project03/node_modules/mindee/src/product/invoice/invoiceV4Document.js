"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceV4Document = void 0;
const summaryHelper_1 = require("../../parsing/common/summaryHelper");
const standard_1 = require("../../parsing/standard");
const invoiceV4LineItem_1 = require("./invoiceV4LineItem");
/**
 * Document data for Invoice, API version 4.
 */
class InvoiceV4Document {
    constructor(rawPrediction, pageId) {
        /** List of Reference numbers including PO number. */
        this.referenceNumbers = [];
        /** The payment information. */
        this.supplierPaymentDetails = [];
        /** The supplier company registration information. */
        this.supplierCompanyRegistrations = [];
        /** The company registration information for the customer. */
        this.customerCompanyRegistrations = [];
        /** Line items details. */
        this.lineItems = [];
        this.locale = new standard_1.LocaleField({
            prediction: rawPrediction["locale"],
            valueKey: "language",
        });
        this.documentType = new standard_1.ClassificationField({
            prediction: rawPrediction["document_type"],
        });
        this.referenceNumbers =
            rawPrediction["reference_numbers"] &&
                rawPrediction["reference_numbers"].map((prediction) => new standard_1.StringField({
                    prediction: prediction,
                    pageId: pageId,
                }));
        this.totalAmount = new standard_1.AmountField({
            prediction: rawPrediction["total_amount"],
            pageId: pageId,
        });
        this.totalTax = new standard_1.AmountField({
            prediction: rawPrediction["taxes"] && rawPrediction["taxes"].length > 0
                ? {
                    value: rawPrediction["taxes"].reduce((acc, tax) => {
                        return tax.value !== undefined ? acc + tax.value : acc;
                    }, 0),
                    confidence: 1,
                }
                : { value: undefined, confidence: 0.0 },
            pageId: pageId,
        });
        this.totalNet = new standard_1.AmountField({
            prediction: rawPrediction["total_net"],
            pageId: pageId,
        });
        this.date = new standard_1.DateField({
            prediction: rawPrediction["date"],
            pageId,
        });
        this.taxes = new standard_1.Taxes().init(rawPrediction["taxes"], pageId);
        this.supplierCompanyRegistrations =
            rawPrediction["supplier_company_registrations"] &&
                rawPrediction["supplier_company_registrations"].map((prediction) => new standard_1.CompanyRegistrationField({
                    prediction: prediction,
                    pageId: pageId,
                }));
        this.dueDate = new standard_1.DateField({
            prediction: rawPrediction["due_date"],
            pageId: pageId,
        });
        this.invoiceNumber = new standard_1.StringField({
            prediction: rawPrediction["invoice_number"],
            pageId: pageId,
        });
        this.supplierName = new standard_1.StringField({
            prediction: rawPrediction["supplier_name"],
            pageId: pageId,
        });
        this.supplierAddress = new standard_1.StringField({
            prediction: rawPrediction["supplier_address"],
            pageId: pageId,
        });
        this.customerName = new standard_1.StringField({
            prediction: rawPrediction["customer_name"],
            pageId: pageId,
        });
        this.customerAddress = new standard_1.StringField({
            prediction: rawPrediction["customer_address"],
            pageId: pageId,
        });
        rawPrediction["customer_company_registrations"] &&
            rawPrediction["customer_company_registrations"].forEach((prediction) => this.customerCompanyRegistrations.push(new standard_1.CompanyRegistrationField({
                prediction: prediction,
                pageId: pageId,
            })));
        rawPrediction["supplier_payment_details"] &&
            rawPrediction["supplier_payment_details"].forEach((prediction) => this.supplierPaymentDetails.push(new standard_1.PaymentDetailsField({
                prediction: prediction,
                pageId: pageId,
            })));
        rawPrediction["line_items"] &&
            rawPrediction["line_items"].forEach((prediction) => this.lineItems.push(new invoiceV4LineItem_1.InvoiceV4LineItem(prediction)));
    }
    toString() {
        const referenceNumbers = this.referenceNumbers
            .map((item) => item.toString())
            .join(", ");
        const paymentDetails = this.supplierPaymentDetails
            .map((item) => item.toString())
            .join("\n                 ");
        const customerCompanyRegistration = this.customerCompanyRegistrations
            .map((item) => item.toString())
            .join("; ");
        const companyRegistration = this.supplierCompanyRegistrations
            .map((item) => item.toString())
            .join("; ");
        let lineItems = "\n";
        if (this.lineItems.length > 0) {
            lineItems += (0, summaryHelper_1.lineSeparator)([22, 9, 9, 10, 18, 38], "-");
            lineItems +=
                "\n  | Code                 | QTY     | Price   | Amount   | Tax (Rate)       | Description                          |\n";
            lineItems += (0, summaryHelper_1.lineSeparator)([22, 9, 9, 10, 18, 38], "=") + "\n  ";
            lineItems += this.lineItems
                .map((item) => item.toTableLine() +
                "\n" +
                (0, summaryHelper_1.lineSeparator)([22, 9, 9, 10, 18, 38], "-"))
                .join("\n  ");
        }
        const outStr = `:Locale: ${this.locale}
:Document type: ${this.documentType}
:Invoice number: ${this.invoiceNumber}
:Reference numbers: ${referenceNumbers}
:Invoice date: ${this.date}
:Invoice due date: ${this.dueDate}
:Supplier name: ${this.supplierName}
:Supplier address: ${this.supplierAddress}
:Supplier company registrations: ${companyRegistration}
:Supplier payment details: ${paymentDetails}
:Customer name: ${this.customerName}
:Customer address: ${this.customerAddress}
:Customer company registrations: ${customerCompanyRegistration}
:Taxes: ${this.taxes}
:Total net: ${this.totalNet}
:Total tax: ${this.totalTax}
:Total amount: ${this.totalAmount}
:Line Items: ${lineItems}`;
        return (0, summaryHelper_1.cleanOutString)(outStr);
    }
}
exports.InvoiceV4Document = InvoiceV4Document;
