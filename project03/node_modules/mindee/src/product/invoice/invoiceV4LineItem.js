"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _InvoiceV4LineItem_instances, _InvoiceV4LineItem_printableValues;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceV4LineItem = void 0;
const standard_1 = require("../../parsing/standard");
/**
 * List of line item details.
 */
class InvoiceV4LineItem {
    constructor(rawPrediction) {
        _InvoiceV4LineItem_instances.add(this);
        /** Confidence score */
        this.confidence = 0.0;
        /**
         * Contains the relative vertices coordinates (points) of a polygon containing
         * the field in the document.
         */
        this.polygon = [];
        this.productCode = rawPrediction["product_code"];
        this.description =
            rawPrediction["description"] !== undefined
                ? rawPrediction["description"]
                : "";
        this.quantity = +parseFloat(rawPrediction["quantity"]).toFixed(3);
        if (isNaN(this.quantity)) {
            this.quantity = undefined;
        }
        this.unitPrice = +parseFloat(rawPrediction["unit_price"]).toFixed(3);
        if (isNaN(this.unitPrice)) {
            this.unitPrice = undefined;
        }
        this.totalAmount = +parseFloat(rawPrediction["total_amount"]).toFixed(3);
        if (isNaN(this.totalAmount)) {
            this.totalAmount = undefined;
        }
        this.taxRate = +parseFloat(rawPrediction["tax_rate"]).toFixed(3);
        if (isNaN(this.taxRate)) {
            this.taxRate = undefined;
        }
        this.taxAmount = +parseFloat(rawPrediction["tax_amount"]).toFixed(3);
        if (isNaN(this.taxAmount)) {
            this.taxAmount = undefined;
        }
        this.pageId = rawPrediction["page_id"];
        this.confidence = rawPrediction["confidence"]
            ? rawPrediction["confidence"]
            : 0.0;
        if (rawPrediction["polygon"]) {
            this.polygon = rawPrediction["polygon"];
        }
    }
    /**
     * Output in a format suitable for inclusion in an rST table.
     */
    toTableLine() {
        const printable = __classPrivateFieldGet(this, _InvoiceV4LineItem_instances, "m", _InvoiceV4LineItem_printableValues).call(this);
        return ("| " +
            printable.productCode.padEnd(20) +
            " | " +
            printable.quantity.padEnd(7) +
            " | " +
            printable.unitPrice.padEnd(7) +
            " | " +
            printable.totalAmount.padEnd(8) +
            " | " +
            printable.tax.padEnd(16) +
            " | " +
            printable.description.padEnd(36) +
            " |");
    }
    /**
     * Default string representation.
     */
    toString() {
        const printable = __classPrivateFieldGet(this, _InvoiceV4LineItem_instances, "m", _InvoiceV4LineItem_printableValues).call(this);
        return ("Code: " +
            printable.productCode +
            ", Quantity: " +
            printable.quantity +
            ", Price: " +
            printable.unitPrice +
            ", Amount: " +
            printable.totalAmount +
            ", Tax (Rate): " +
            printable.tax +
            " Description: " +
            printable.description).trim();
    }
}
exports.InvoiceV4LineItem = InvoiceV4LineItem;
_InvoiceV4LineItem_instances = new WeakSet(), _InvoiceV4LineItem_printableValues = function _InvoiceV4LineItem_printableValues() {
    return {
        productCode: this.productCode ?? "",
        quantity: this.quantity !== undefined ? (0, standard_1.floatToString)(this.quantity) : "",
        unitPrice: this.unitPrice !== undefined ? (0, standard_1.floatToString)(this.unitPrice) : "",
        totalAmount: this.totalAmount !== undefined ? (0, standard_1.floatToString)(this.totalAmount) : "",
        tax: (this.taxAmount !== undefined ? (0, standard_1.floatToString)(this.taxAmount) : "") +
            (this.taxRate !== undefined
                ? " (" + (0, standard_1.floatToString)(this.taxRate) + "%)"
                : ""),
        description: this.description.length > 33
            ? this.description.substring(0, 33) + "..."
            : this.description,
    };
};
