"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FinancialDocumentV1Document = void 0;
const common_1 = require("../../parsing/common");
const financialDocumentV1LineItem_1 = require("./financialDocumentV1LineItem");
const standard_1 = require("../../parsing/standard");
/**
 * Document data for Financial Document, API version 1.
 */
class FinancialDocumentV1Document {
    constructor(rawPrediction, pageId) {
        /** List of company registrations associated to the customer. */
        this.customerCompanyRegistrations = [];
        /** List of line item details. */
        this.lineItems = [];
        /** List of Reference numbers, including PO number. */
        this.referenceNumbers = [];
        /** List of company registrations associated to the supplier. */
        this.supplierCompanyRegistrations = [];
        /** List of payment details associated to the supplier. */
        this.supplierPaymentDetails = [];
        this.category = new standard_1.ClassificationField({
            prediction: rawPrediction["category"],
        });
        this.customerAddress = new standard_1.StringField({
            prediction: rawPrediction["customer_address"],
            pageId: pageId,
        });
        rawPrediction["customer_company_registrations"] &&
            rawPrediction["customer_company_registrations"].map((itemPrediction) => this.customerCompanyRegistrations.push(new standard_1.CompanyRegistrationField({
                prediction: itemPrediction,
                pageId: pageId,
            })));
        this.customerName = new standard_1.StringField({
            prediction: rawPrediction["customer_name"],
            pageId: pageId,
        });
        this.date = new standard_1.DateField({
            prediction: rawPrediction["date"],
            pageId: pageId,
        });
        this.documentType = new standard_1.ClassificationField({
            prediction: rawPrediction["document_type"],
        });
        this.dueDate = new standard_1.DateField({
            prediction: rawPrediction["due_date"],
            pageId: pageId,
        });
        this.invoiceNumber = new standard_1.StringField({
            prediction: rawPrediction["invoice_number"],
            pageId: pageId,
        });
        rawPrediction["line_items"] &&
            rawPrediction["line_items"].map((itemPrediction) => this.lineItems.push(new financialDocumentV1LineItem_1.FinancialDocumentV1LineItem({
                prediction: itemPrediction,
                pageId: pageId,
            })));
        this.locale = new standard_1.LocaleField({
            prediction: rawPrediction["locale"],
        });
        rawPrediction["reference_numbers"] &&
            rawPrediction["reference_numbers"].map((itemPrediction) => this.referenceNumbers.push(new standard_1.StringField({
                prediction: itemPrediction,
                pageId: pageId,
            })));
        this.subcategory = new standard_1.ClassificationField({
            prediction: rawPrediction["subcategory"],
        });
        this.supplierAddress = new standard_1.StringField({
            prediction: rawPrediction["supplier_address"],
            pageId: pageId,
        });
        rawPrediction["supplier_company_registrations"] &&
            rawPrediction["supplier_company_registrations"].map((itemPrediction) => this.supplierCompanyRegistrations.push(new standard_1.CompanyRegistrationField({
                prediction: itemPrediction,
                pageId: pageId,
            })));
        this.supplierName = new standard_1.StringField({
            prediction: rawPrediction["supplier_name"],
            pageId: pageId,
        });
        rawPrediction["supplier_payment_details"] &&
            rawPrediction["supplier_payment_details"].map((itemPrediction) => this.supplierPaymentDetails.push(new standard_1.PaymentDetailsField({
                prediction: itemPrediction,
                pageId: pageId,
            })));
        this.supplierPhoneNumber = new standard_1.StringField({
            prediction: rawPrediction["supplier_phone_number"],
            pageId: pageId,
        });
        this.taxes = new standard_1.Taxes().init(rawPrediction["taxes"], pageId);
        this.time = new standard_1.StringField({
            prediction: rawPrediction["time"],
            pageId: pageId,
        });
        this.tip = new standard_1.AmountField({
            prediction: rawPrediction["tip"],
            pageId: pageId,
        });
        this.totalAmount = new standard_1.AmountField({
            prediction: rawPrediction["total_amount"],
            pageId: pageId,
        });
        this.totalNet = new standard_1.AmountField({
            prediction: rawPrediction["total_net"],
            pageId: pageId,
        });
        this.totalTax = new standard_1.AmountField({
            prediction: rawPrediction["total_tax"],
            pageId: pageId,
        });
    }
    /**
     * Default string representation.
     */
    toString() {
        const referenceNumbers = this.referenceNumbers.join("\n                    ");
        const supplierPaymentDetails = this.supplierPaymentDetails.join("\n                           ");
        const supplierCompanyRegistrations = this.supplierCompanyRegistrations.join("\n                                 ");
        const customerCompanyRegistrations = this.customerCompanyRegistrations.join("\n                                 ");
        let lineItemsSummary = "";
        if (this.lineItems && this.lineItems.length > 0) {
            const lineItemsColSizes = [38, 14, 10, 12, 14, 14, 12];
            lineItemsSummary += "\n" + (0, common_1.lineSeparator)(lineItemsColSizes, "-") + "\n  ";
            lineItemsSummary += "| Description                          ";
            lineItemsSummary += "| Product code ";
            lineItemsSummary += "| Quantity ";
            lineItemsSummary += "| Tax Amount ";
            lineItemsSummary += "| Tax Rate (%) ";
            lineItemsSummary += "| Total Amount ";
            lineItemsSummary += "| Unit Price ";
            lineItemsSummary += "|\n" + (0, common_1.lineSeparator)(lineItemsColSizes, "=");
            lineItemsSummary += this.lineItems.map((item) => "\n  " + item.toTableLine() + "\n" + (0, common_1.lineSeparator)(lineItemsColSizes, "-")).join("");
        }
        const outStr = `:Locale: ${this.locale}
:Invoice Number: ${this.invoiceNumber}
:Reference Numbers: ${referenceNumbers}
:Purchase Date: ${this.date}
:Due Date: ${this.dueDate}
:Total Net: ${this.totalNet}
:Total Amount: ${this.totalAmount}
:Taxes: ${this.taxes}
:Supplier Payment Details: ${supplierPaymentDetails}
:Supplier name: ${this.supplierName}
:Supplier Company Registrations: ${supplierCompanyRegistrations}
:Supplier Address: ${this.supplierAddress}
:Supplier Phone Number: ${this.supplierPhoneNumber}
:Customer name: ${this.customerName}
:Customer Company Registrations: ${customerCompanyRegistrations}
:Customer Address: ${this.customerAddress}
:Document Type: ${this.documentType}
:Purchase Subcategory: ${this.subcategory}
:Purchase Category: ${this.category}
:Total Tax: ${this.totalTax}
:Tip and Gratuity: ${this.tip}
:Purchase Time: ${this.time}
:Line Items: ${lineItemsSummary}`.trimEnd();
        return (0, common_1.cleanOutString)(outStr);
    }
}
exports.FinancialDocumentV1Document = FinancialDocumentV1Document;
